name: $(GitVersion.SemVer)-$(Year:yy)$(DayOfYear)$(rev:.r)

trigger:
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - azure-pipelines.yml
      - GitVersion.yml
      - README.md
      - RELEASENOTES.md

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  nuGetSourceFeed: 'https://api.nuget.org/v3/index.json'
  gitHubConnection: 'albertodall_on_github'

stages:
- stage: Build_Test_Publish
  displayName: 'Build, versioning, testing and create package'
  jobs:
  - job: BuildLib
    displayName: 'Build solution, version package and run tests'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 2.2.x'
      inputs:
        version: 2.2.x
    
    - task: NuGetCommand@2
      displayName: 'Install GitVersion CommandLine'
      inputs:
        command: custom
        arguments: install GitVersion.CommandLine -OutputDirectory $(Build.BinariesDirectory) -ExcludeVersion
    
    - script: $(Build.BinariesDirectory)/GitVersion.CommandLine/tools/GitVersion.exe /output buildserver /updateassemblyinfo /nofetch
      displayName: 'Apply Semantic Versioning'

    - script: echo %Action%%BuildVersion%
      displayName: 'Set build version'
      env:
        Action: '##vso[build.updatebuildnumber]'
        BuildVersion: $(GitVersion.SemVer)
      
    - powershell: |
        Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$(GitVersion.SemVer)"
        Write-Host "##vso[task.setvariable variable=FullPackageVersion;isOutput=true]$(GitVersion.FullSemVer)"
        Write-Host "##vso[task.setvariable variable=CommitSha;isOutput=true]$(GitVersion.Sha)"
        Write-Host "##vso[task.setvariable variable=CommitShortSha;isOutput=true]$(GitVersion.ShortSha)"
      name: BuildContext
      displayName: 'Set build context parameters'

    - task: PowerShell@2
      displayName: 'Show build context parameters'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Building package version: $(BuildContext.PackageVersion)"
          Write-Host "Build triggered by branch: $(Build.SourceBranch)"
          Write-Host "Build triggered by commit: $(BuildContext.CommitSha)"
          Write-Host "Build triggered by commit (short): $(BuildContext.CommitShortSha)"
        errorActionPreference: 'silentlyContinue'
        pwsh: true

    - task: DotNetCoreCLI@2
      displayName: 'Build library project'
      inputs:
        command: 'build'
        projects: '**/IdentityServer4.NHibernate.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/lib /p:Version=$(GitVersion.SemVer)'
    
    - script: 'sqllocaldb start MSSQLLocalDB'
      displayName: 'Start MSSQLLocalDB instance for integration testing'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests'
      inputs:
        command: test
        projects: '**/IdentityServer4.NHibernate.IntegrationTests.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        testRunTitle: 'Integration tests'

    - script: 'sqllocaldb stop MSSQLLocalDB -i'
      displayName: 'Stop MSSQLLocalDB instance'
      condition: always()

    - task: DotNetCoreCLI@2
      displayName: 'Publish Storage project to allow schema scripts creation'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/IdentityServer4.NHibernate.Storage.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/storagelib'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PowerShell@2
      displayName: 'Create schema scripts'
      inputs:
        targetType: filePath
        filePath: './Export-DatabaseSchemas.ps1'
        arguments: '-PublishPath $(Build.ArtifactStagingDirectory)/storagelib -OutputPath $(Build.ArtifactStagingDirectory)/lib'
        failOnStderr: true
        pwsh: true
    
    - task: DotNetCoreCLI@2
      displayName: Create NuGet package
      inputs:
        command: 'pack'
        packagesToPack: '**/IdentityServer4.NHibernate.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/package'
        nobuild: true
        versioningScheme: 'off'
        buildProperties: 'NuspecFile=$(Build.ArtifactStagingDirectory)/lib/IdentityServer4.Contrib.NHibernate.nuspec;NuspecProperties="version=$(GitVersion.SemVer)"'

    - task: CopyFiles@2
      displayName: Copy additional assets
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          README.md
          RELEASENOTES.md
        TargetFolder: '$(Build.ArtifactStagingDirectory)/package'
        OverWrite: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/package'
        artifact: 'package'
    
- stage: PublishToLocalPreviewFeed
  displayName: 'Publish package to Azure Artifacts preview feed'
  dependsOn: Build_Test_Publish
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: PublishPreview
    displayName: 'Publish package'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package

    - task: DotNetCoreCLI@2
      displayName: Publish to feed
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(AzureArtifactsFeed)
      condition: eq(variables['SkipPreviewFeedPush'], false)
      continueOnError: true

- stage: 'PublishToLocalStableFeed'
  displayName: 'Publish package to Azure Artifacts stable feed'
  dependsOn: Build_Test_Publish
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
  - job: PublishLocalStable
    displayName: 'Publish package'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
    
    - task: NuGetCommand@2
      displayName: 'Publish to feed'
      continueOnError: true
      condition: eq(variables['SkipLocalStableFeedPush'], false)
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(AzureArtifactsFeed)
        allowPackageConflicts: true

- stage: 'ReleaseNuGetPackage'
  displayName: 'Publish package to NuGet.org'
  dependsOn: 
    - Build_Test_Publish
    - PublishToLocalStableFeed
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
    - deployment:
      pool:
        vmImage: 'windows-latest'
      environment: 'NuGet Feed'
      variables:
        PackageVersion: $[ stageDependencies.Build_Test_Publish.BuildLib.outputs['BuildContext.PackageVersion'] ]
        CommitSha: $[ stageDependencies.Build_Test_Publish.BuildLib.outputs['BuildContext.CommitSha'] ]
        CommitShortSha: $[ stageDependencies.Build_Test_Publish.BuildLib.outputs['BuildContext.CommitShortSha'] ]
      strategy:
        runOnce:
          deploy:
            steps:      
              - task: CmdLine@2
                name: PublishOnNuGet
                displayName: 'Publish package'
                inputs:
                  script: 'dotnet nuget push **/*.nupkg --source $(nuGetSourceFeed) --api-key $(NuGetApiKey) --no-symbols true'
                  workingDirectory: '$(Pipeline.Workspace)'
                condition: eq(variables['SkipNugetFeedPush'], false)

              - task: GitHubRelease@1
                inputs:
                  gitHubConnection: '$(gitHubConnection)'
                  repositoryName: '$(Build.Repository.Name)'
                  action: 'create'
                  target: $(CommitSha)
                  tagSource: 'userSpecifiedTag'
                  tag: $(PackageVersion)
                  title: 'v$(PackageVersion) $(CommitShortSha)'
                  releaseNotesFilePath: '$(Pipeline.Workspace)/package/RELEASENOTES.md'
                  assets: '$(Pipeline.Workspace)/package/*.nupkg'
                  changeLogCompareToRelease: 'lastFullRelease'
                  changeLogType: 'commitBased'
                condition: succeeded()
