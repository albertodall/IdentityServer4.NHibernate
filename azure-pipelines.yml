name: $(GitVersion.SemVer)-$(Year:yy)$(DayOfYear)$(rev:.r)

trigger:
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - azure-pipelines.yml
      - GitVersion.yml

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  nuGetSourceFeed: 'https://api.nuget.org/v3/index.json'

stages:
- stage: Build_Test_Publish
  displayName: 'Build project, run tests and publish'
  jobs:
  - job: BuildLib
    displayName: 'Build solution, version package and run tests'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 3.0.x'
      inputs:
        version: 3.0.x

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 2.1.x required for GitVersion'
      inputs:
        version: 2.1.x

    - script: echo %Action%%BuildVersion%
      displayName: 'Set build version'
      env:
        Action: '##vso[build.updatebuildnumber]'
        BuildVersion: $(GitVersion.SemVer)

    - task: GitVersion@5
      displayName: 'Apply Semantic Versioning'
      inputs:
        runtime: 'core'
        configFilePath: 'GitVersion.yml'
        updateAssemblyInfo: true
    
    - powershell: |
        Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$(GitVersion.SemVer)"
        Write-Host "##vso[task.setvariable variable=CommitSha;isOutput=true]$(GitVersion.Sha)"
        Write-Host "##vso[task.setvariable variable=CommitShortSha;isOutput=true]$(GitVersion.ShortSha)"
      name: BuildContext
      displayName: 'Set build context parameters'

    - task: PowerShell@2
      displayName: 'Show build context parameters'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Building package version: $(BuildContext.PackageVersion)"
          Write-Host "Build triggered by branch: $(Build.SourceBranch)"
          Write-Host "Build triggered by commit: $(BuildContext.CommitSha)"
          Write-Host "Build triggered by commit (short): $(BuildContext.CommitShortSha)"
        errorActionPreference: 'silentlyContinue'
        pwsh: true

    - task: DotNetCoreCLI@2
      displayName: 'Build library project'
      inputs:
        command: 'build'
        projects: '**/IdentityServer4.NHibernate.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/lib /p:Version=$(GitVersion.SemVer)'
    
    - script: 'sqllocaldb start MSSQLLocalDB'
      displayName: 'Start MSSQLLocalDB instance for integration testing'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests'
      inputs:
        command: test
        projects: '**/IdentityServer4.NHibernate.IntegrationTests.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        testRunTitle: 'Integration tests'

    - script: 'sqllocaldb stop MSSQLLocalDB -i'
      displayName: 'Stop MSSQLLocalDB instance'
      condition: always()

    - task: DotNetCoreCLI@2
      displayName: 'Publish Storage project to allow schema scripts creation'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/IdentityServer4.NHibernate.Storage.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/storagelib'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PowerShell@2
      displayName: 'Create schema scripts'
      inputs:
        targetType: filePath
        filePath: './Export-DatabaseSchemas.ps1'
        arguments: '-PublishPath $(Build.ArtifactStagingDirectory)/storagelib -OutputPath $(Build.ArtifactStagingDirectory)/lib'
        failOnStderr: true
        pwsh: true
    
    - task: DotNetCoreCLI@2
      displayName: Create NuGet package
      inputs:
        command: 'pack'
        packagesToPack: '**/IdentityServer4.NHibernate.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/package'
        nobuild: true
        versioningScheme: 'off'
        buildProperties: 'NuspecFile=$(Build.ArtifactStagingDirectory)/lib/IdentityServer4.Contrib.NHibernate.nuspec;NuspecProperties="version=$(GitVersion.SemVer)"'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/package'
        artifact: 'package'
    
  - job: PublishToLocalPreviewFeed
    displayName: 'Publish package to Azure Artifacts preview feed'
    dependsOn: BuildLib
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
      
    - task: DotNetCoreCLI@2
      displayName: Publish to feed
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(AzureArtifactsFeed)

  - job: PublishToLocalStableFeed
    displayName: 'Publish package to Azure Artifacts stable feed'
    dependsOn: BuildLib
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: Download package
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package

    - task: NuGetToolInstaller@1
      displayName: 'Install required NuGet version'
      inputs:
        versionSpec: '5.3.x'

    - task: NuGetCommand@2
      displayName: 'Publish to feed'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(AzureArtifactsFeed)
        allowPackageConflicts: true
      continueOnError: true

  - job: PublishToNuGetFeed
    displayName: 'Publish package to NuGet.org'
    dependsOn: BuildLib
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
        
    - task: CmdLine@2
      displayName: 'Publish package on NuGet'
      inputs:
        script: 'dotnet nuget push **/*.nupkg --source $(nuGetSourceFeed) --api-key $(NuGetApiKey) --no-symbols true'
        workingDirectory: '$(Pipeline.Workspace)'
      continueOnError: true

  - job: CreateGitHubRelease
    displayName: 'Create GitHub Release'
    dependsOn: 
    -  BuildLib
    -  PublishToNuGetFeed
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
    variables:
      PackageVersion: $[ dependencies.BuildLib.outputs['BuildContext.PackageVersion'] ]
      CommitSha: $[ dependencies.BuildLib.outputs['BuildContext.CommitSha'] ]
      CommitShortSha: $[ dependencies.BuildLib.outputs['BuildContext.CommitShortSha'] ]
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package

    - task: GitHubRelease@1
      displayName: 'Create release'
      inputs:
        gitHubConnection: '$(GitHubConnection)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(CommitSha)'
        tagSource: 'userSpecifiedTag'
        tag: '$(PackageVersion)'
        title: 'v$(PackageVersion) $(CommitShortSha)'
        releaseNotesFilePath: 'RELEASENOTES.md'
        assets: '$(Pipeline.Workspace)/package/*.nupkg'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'